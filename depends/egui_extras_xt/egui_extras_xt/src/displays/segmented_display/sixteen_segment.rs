use egui::{pos2, Pos2};
use itertools::Itertools;

use crate::displays::segmented_display::{DisplayGlyph, DisplayImpl};

// ----------------------------------------------------------------------------

#[derive(Clone, Copy, Default)]
pub struct SixteenSegment;

impl DisplayImpl for SixteenSegment {
    fn segment_count(&self) -> usize {
        16
    }

    fn glyph(&self, c: char) -> Option<DisplayGlyph> {
        #[rustfmt::skip]
        const GLYPH_DATA: &[(char, DisplayGlyph)] = &[
            // Basic Latin
            (' ',  0x0000), ('!',  0x2200), ('"',  0x0280), ('#',  0xAA3C),
            ('$',  0xAABB), ('%',  0xEE99), ('&',  0x9379), ('\'', 0x0080),
            ('(',  0x1400), (')',  0x4100), ('*',  0xDD00), ('+',  0xAA00),
            (',',  0xC000), ('-',  0x8800), ('.',  0x0020), ('/',  0x4400),
            ('0',  0x44FF), ('1',  0x040C), ('2',  0x8877), ('3',  0x883F),
            ('4',  0x888C), ('5',  0x88BB), ('6',  0x88FB), ('7',  0x2483),
            ('8',  0x88FF), ('9',  0x88BF), (':',  0x8020), (';',  0xC001),
            ('<',  0x9400), ('=',  0x8830), ('>',  0x4900), ('?',  0x2887),
            ('@',  0x28DF), ('A',  0x88CF), ('B',  0x2A3F), ('C',  0x00F3),
            ('D',  0x223F), ('E',  0x80F3), ('F',  0x80C3), ('G',  0x08FB),
            ('H',  0x88CC), ('I',  0x2233), ('J',  0x007E), ('K',  0x94C0),
            ('L',  0x00F0), ('M',  0x05CC), ('N',  0x11CC), ('O',  0x00FF),
            ('P',  0x88C7), ('Q',  0x10FF), ('R',  0x98C7), ('S',  0x093B),
            ('T',  0x2203), ('U',  0x00FC), ('V',  0x44C0), ('W',  0x50CC),
            ('X',  0x5500), ('Y',  0x2500), ('Z',  0x4433), ('[',  0x2212),
            ('\\', 0x1100), (']',  0x2221), ('^',  0x0404), ('_',  0x0030),
            ('`',  0x0100), ('a',  0xA070), ('b',  0xA0E0), ('c',  0x8060),
            ('d',  0xA260), ('e',  0xC060), ('f',  0xAA02), ('g',  0x1818),
            ('h',  0xA0C0), ('i',  0x0040), ('j',  0x2220), ('k',  0x3A00),
            ('l',  0x00E0), ('m',  0xA848), ('n',  0xA040), ('o',  0xA060),
            ('p',  0x82C1), ('q',  0xA281), ('r',  0x8040), ('s',  0x1810),
            ('t',  0xAA10), ('u',  0x2060), ('v',  0x4040), ('w',  0x5048),
            ('x',  0xD800), ('y',  0x1018), ('z',  0xC020), ('{',  0xA212),
            ('|',  0x2200), ('}',  0x2A21), ('~',  0x0A85),
            // Latin-1 Supplement
            ('¬¢',  0x8060), ('¬£',  0xA276), ('¬•',  0xAD00), ('¬ß',  0x11BB),
            ('¬¨',  0x8808), ('¬∞',  0x8281), ('¬±',  0xAA30), ('¬≤',  0x0C02),
            ('¬≥',  0x0C06), ('¬µ',  0x82C0), ('¬∂',  0xA28F), ('√ó',  0x5500),
            ('√ü',  0x0CDB),
            // Greek and Coptic
            ('Œë',  0x88CF), ('Œí',  0x8CFB), ('Œì',  0x00C3), ('Œî',  0x443C),
            ('Œï',  0x88F3), ('Œñ',  0x4433), ('Œó',  0x88CC), ('Œò',  0x80FF),
            ('Œô',  0x2233), ('Œö',  0x94C0), ('Œõ',  0x440C), ('Œú',  0x05CC),
            ('Œù',  0x11CC), ('Œû',  0x8833), ('Œü',  0x00FF), ('Œ†',  0x00CF),
            ('Œ°',  0x88C7), ('Œ£',  0x4133), ('Œ§',  0x2203), ('Œ•',  0x2500),
            ('Œ¶',  0xAA87), ('Œß',  0x5500), ('Œ®',  0xAA84), ('Œ©',  0xD887),
            ('Œ±',  0xB070), ('Œ≤',  0x0CDB), ('Œ≥',  0xC280), ('Œ¥',  0xA161),
            ('Œµ',  0x80E1), ('Œ∂',  0x8161), ('Œ∑',  0xA040), ('Œ∏',  0xA2E1),
            ('Œπ',  0x0060), ('Œ∫',  0x3600), ('Œª',  0x5100), ('Œº',  0x82C0),
            ('ŒΩ',  0x4040), ('Œæ',  0x80F1), ('Œø',  0xA060), ('œÄ',  0xD800),
            ('œÅ',  0x82C1), ('œÇ',  0x8060), ('œÉ',  0xA860), ('œÑ',  0xA800),
            ('œÖ',  0x2060), ('œÜ',  0xAA86), ('œá',  0x5500), ('œà',  0xAA84),
            ('œâ',  0x2078),
            // Currency Symbols
            ('‚Ç¨',  0xEA12),
            // Enclosed Alphanumerics
            ('‚ë†',  0x000C), ('‚ë°',  0x2816), ('‚ë¢',  0x081E), ('‚ë£',  0x0A0C),
            ('‚ë§',  0x0A1A), ('‚ë•',  0x2A1A), ('‚ë¶',  0x020E), ('‚ëß',  0x2A1E),
            ('‚ë®',  0x0A1E), ('‚ë©',  0x22DE), ('‚ë™',  0x00CC), ('‚ë´',  0x28D6),
            ('‚ë¨',  0x08DE), ('‚ë≠',  0x0ACC), ('‚ëÆ',  0x0ADA), ('‚ëØ',  0x2ADA),
            ('‚ë∞',  0x02CE), ('‚ë±',  0x2ADE), ('‚ë≤',  0x0ADE), ('‚ë¥',  0x000C),
            ('‚ëµ',  0x2816), ('‚ë∂',  0x081E), ('‚ë∑',  0x0A0C), ('‚ë∏',  0x0A1A),
            ('‚ëπ',  0x2A1A), ('‚ë∫',  0x020E), ('‚ëª',  0x2A1E), ('‚ëº',  0x0A1E),
            ('‚ëΩ',  0x22DE), ('‚ëæ',  0x00CC), ('‚ëø',  0x28D6), ('‚íÄ',  0x08DE),
            ('‚íÅ',  0x0ACC), ('‚íÇ',  0x0ADA), ('‚íÉ',  0x2ADA), ('‚íÑ',  0x02CE),
            ('‚íÖ',  0x2ADE), ('‚íÜ',  0x0ADE), ('‚íà',  0x000C), ('‚íâ',  0x2816),
            ('‚íä',  0x081E), ('‚íã',  0x0A0C), ('‚íå',  0x0A1A), ('‚íç',  0x2A1A),
            ('‚íé',  0x020E), ('‚íè',  0x2A1E), ('‚íê',  0x0A1E), ('‚íë',  0x22DE),
            ('‚íí',  0x00CC), ('‚íì',  0x28D6), ('‚íî',  0x08DE), ('‚íï',  0x0ACC),
            ('‚íñ',  0x0ADA), ('‚íó',  0x2ADA), ('‚íò',  0x02CE), ('‚íô',  0x2ADE),
            ('‚íö',  0x0ADE), ('‚ì´',  0x00CC), ('‚ì¨',  0x28D6), ('‚ì≠',  0x08DE),
            ('‚ìÆ',  0x0ACC), ('‚ìØ',  0x0ADA), ('‚ì∞',  0x2ADA), ('‚ì±',  0x02CE),
            ('‚ì≤',  0x2ADE), ('‚ì≥',  0x0ADE), ('‚ìµ',  0x000C), ('‚ì∂',  0x2816),
            ('‚ì∑',  0x081E), ('‚ì∏',  0x0A0C), ('‚ìπ',  0x0A1A), ('‚ì∫',  0x2A1A),
            ('‚ìª',  0x020E), ('‚ìº',  0x2A1E), ('‚ìΩ',  0x0A1E), ('‚ìæ',  0x22DE),
            ('‚ìø',  0x221E),
            // Dingbats
            ('‚úî',  0x4440), ('‚ù∂',  0x000C), ('‚ù∑',  0x2816), ('‚ù∏',  0x081E),
            ('‚ùπ',  0x0A0C), ('‚ù∫',  0x0A1A), ('‚ùª',  0x2A1A), ('‚ùº',  0x020E),
            ('‚ùΩ',  0x2A1E), ('‚ùæ',  0x0A1E), ('‚ùø',  0x22DE), ('‚ûÄ',  0x000C),
            ('‚ûÅ',  0x2816), ('‚ûÇ',  0x081E), ('‚ûÉ',  0x0A0C), ('‚ûÑ',  0x0A1A),
            ('‚ûÖ',  0x2A1A), ('‚ûÜ',  0x020E), ('‚ûá',  0x2A1E), ('‚ûà',  0x0A1E),
            ('‚ûâ',  0x22DE), ('‚ûä',  0x000C), ('‚ûã',  0x2816), ('‚ûå',  0x081E),
            ('‚ûç',  0x0A0C), ('‚ûé',  0x0A1A), ('‚ûè',  0x2A1A), ('‚ûê',  0x020E),
            ('‚ûë',  0x2A1E), ('‚ûí',  0x0A1E), ('‚ûì',  0x22DE),
            // CJK Symbols and Punctuation
            ('„ÄÇ',  0xA060), ('„ÄÜ',  0x5540), ('„Äá',  0x00FF), ('„Äà',  0x1400),
            ('„Äâ',  0x4100), ('„Äå',  0x00C3), ('„Äç',  0x003C), ('„Äé',  0x28E7),
            ('„Äè',  0x827E), ('„Äí',  0xA803), ('„Äî',  0x2212), ('„Äï',  0x2221),
            ('„Äñ',  0x14F3), ('„Äó',  0x413F), ('„Äò',  0x14F3), ('„Äô',  0x413F),
            ('„Äö',  0x22F3), ('„Äõ',  0x223F), ('„Äú',  0xA058), ('„Äø',  0x55FF),
            // CJK Unified Ideographs
            ('‰∏Ä',  0x8800), ('‰∏É',  0xAA10), ('‰∏á',  0x4A0B), ('‰∏â',  0x8833),
            ('‰∏ä',  0x2A30), ('‰∏ã',  0x3203), ('‰∏≠',  0xAA87), ('‰∏ª',  0xAA33),
            ('‰πù',  0xCA08), ('‰∫å',  0x0033), ('‰∫î',  0xAA3B), ('‰∫∫',  0x5200),
            ('ÂÖÉ',  0xD803), ('ÂÖ•',  0x5200), ('ÂÖ´',  0x420C), ('ÂÖ≠',  0xDA00),
            ('ÂÜÜ',  0x8ADF), ('Âäõ',  0xCA18), ('ÂçÅ',  0xAA00), ('ÂçÉ',  0xAA03),
            ('Âè£',  0x00FF), ('Âõõ',  0x8AFF), ('Âúü',  0xAA30), ('Â§ß',  0xDA00),
            ('Â§©',  0xDA03), ('Â≠ê',  0xAC03), ('Â±±',  0x22FC), ('Â∑ù',  0x22CC),
            ('Â∑•',  0x2233), ('Â∏Ç',  0xAA5B), ('Êó•',  0x88FF), ('Êú®',  0xFA00),
            ('Ê≠£',  0x2A73), ('Áî∞',  0xAAFF), ('Áôæ',  0x88FF), ('Á§∫',  0xF803),
            ('Á±≥',  0xFF00), ('Èõ∂',  0x5287),
            // Halfwidth and Fullwidth Forms
            ('ÔºÅ',  0x2200), ('ÔºÇ',  0x0280), ('ÔºÉ',  0xAA3C), ('ÔºÑ',  0xAABB),
            ('ÔºÖ',  0xEE99), ('ÔºÜ',  0x9379), ('Ôºá',  0x0080), ('Ôºà',  0x1400),
            ('Ôºâ',  0x4100), ('Ôºä',  0xDD00), ('Ôºã',  0xAA00), ('Ôºå',  0xC000),
            ('Ôºç',  0x8800), ('Ôºé',  0x0020), ('Ôºè',  0x4400), ('Ôºê',  0x44FF),
            ('Ôºë',  0x040C), ('Ôºí',  0x8877), ('Ôºì',  0x883F), ('Ôºî',  0x888C),
            ('Ôºï',  0x88BB), ('Ôºñ',  0x88FB), ('Ôºó',  0x2483), ('Ôºò',  0x88FF),
            ('Ôºô',  0x88BF), ('Ôºö',  0x8020), ('Ôºõ',  0xC001), ('Ôºú',  0x9400),
            ('Ôºù',  0x8830), ('Ôºû',  0x4900), ('Ôºü',  0x2887), ('Ôº†',  0x28DF),
            ('Ôº°',  0x88CF), ('Ôº¢',  0x2A3F), ('Ôº£',  0x00F3), ('Ôº§',  0x223F),
            ('Ôº•',  0x80F3), ('Ôº¶',  0x80C3), ('Ôºß',  0x08FB), ('Ôº®',  0x88CC),
            ('Ôº©',  0x2233), ('Ôº™',  0x007E), ('Ôº´',  0x94C0), ('Ôº¨',  0x00F0),
            ('Ôº≠',  0x05CC), ('ÔºÆ',  0x11CC), ('ÔºØ',  0x00FF), ('Ôº∞',  0x88C7),
            ('Ôº±',  0x10FF), ('Ôº≤',  0x98C7), ('Ôº≥',  0x093B), ('Ôº¥',  0x2203),
            ('Ôºµ',  0x00FC), ('Ôº∂',  0x44C0), ('Ôº∑',  0x50CC), ('Ôº∏',  0x5500),
            ('Ôºπ',  0x2500), ('Ôº∫',  0x4433), ('Ôºª',  0x2212), ('Ôºº',  0x1100),
            ('ÔºΩ',  0x2221), ('Ôºæ',  0x0404), ('Ôºø',  0x0030), ('ÔΩÄ',  0x0100),
            ('ÔΩÅ',  0xA070), ('ÔΩÇ',  0xA0E0), ('ÔΩÉ',  0x8060), ('ÔΩÑ',  0xA260),
            ('ÔΩÖ',  0xC060), ('ÔΩÜ',  0xAA02), ('ÔΩá',  0x1818), ('ÔΩà',  0xA0C0),
            ('ÔΩâ',  0x0040), ('ÔΩä',  0x2220), ('ÔΩã',  0x3A00), ('ÔΩå',  0x00E0),
            ('ÔΩç',  0xA848), ('ÔΩé',  0xA040), ('ÔΩè',  0xA060), ('ÔΩê',  0x82C1),
            ('ÔΩë',  0xA281), ('ÔΩí',  0x8040), ('ÔΩì',  0x1810), ('ÔΩî',  0xAA10),
            ('ÔΩï',  0x2060), ('ÔΩñ',  0x4040), ('ÔΩó',  0x5048), ('ÔΩò',  0xD800),
            ('ÔΩô',  0x1018), ('ÔΩö',  0xC020), ('ÔΩõ',  0xA212), ('ÔΩú',  0x2200),
            ('ÔΩù',  0x2A21), ('ÔΩû',  0x0A85), ('ÔΩ°',  0xA060), ('ÔΩ¢',  0x00C3),
            ('ÔΩ£',  0x003C), ('Ôø†',  0x8060), ('Ôø°',  0xA276), ('Ôø§',  0x2200),
            ('Ôø•',  0xAD00),
            // Enclosed Alphanumeric Supplement
            ('üÑÄ',  0x221E), ('üÑÅ',  0x221E), ('üÑÇ',  0x000C), ('üÑÉ',  0x2816),
            ('üÑÑ',  0x081E), ('üÑÖ',  0x0A0C), ('üÑÜ',  0x0A1A), ('üÑá',  0x2A1A),
            ('üÑà',  0x020E), ('üÑâ',  0x2A1E), ('üÑä',  0x0A1E), ('üÑã',  0x221E),
            ('üÑå',  0x221E),
            // Miscellaneous Symbols and Pictographs
            ('üåü',  0xDA00), ('üå†',  0xDA00), ('üçÄ',  0xFF55), ('üéÇ',  0x8AFC),
            ('üéà',  0xC887), ('üê±',  0x05FC), ('üëç',  0xAC38), ('üëé',  0x9A07),
            ('üí£',  0xA160), ('üí§',  0xCC22), ('üí•',  0xFF00), ('üìê',  0x51F0),
            ('üî´',  0x988F), ('üóï',  0x0030), ('üóñ',  0x00FF), ('üóó',  0xAA66),
            ('üóô',  0x5500), ('üóö',  0x2A4E), ('üóõ',  0xA2C9), ('üó§',  0x0700),
            ('üó•',  0x7000), ('üó¶',  0xC100), ('üóß',  0x1C00), ('üóº',  0x7200),
            // Emoticons
            ('üòÇ',  0x0578), ('üòâ',  0x04B8), ('üòä',  0x0578), ('üòè',  0x04B8),
            ('üòê',  0x00B4), ('üòë',  0x00B4), ('üòí',  0x00B4), ('üòï',  0x5084),
            ('üòû',  0x5084), ('üò¢',  0x5084), ('üò•',  0x5084), ('üò©',  0x50B4),
            ('üò´',  0x50B4), ('üò≠',  0x50B4), ('üò≤',  0x50B4), ('üò≥',  0x8AB7),
            ('üôÅ',  0x5084),
            // Supplemental Symbols and Pictographs
            ('ü§£',  0x0578), ('ü•µ',  0x50B4), ('üßò',  0x7230),
        ];

        debug_assert!(GLYPH_DATA
            .iter()
            .map(|(k, _)| k)
            .tuple_windows()
            .all(|(k1, k2)| k1 < k2)); // is_sorted()

        GLYPH_DATA
            .binary_search_by_key(&c, |(k, _)| *k)
            .ok()
            .map(|index| GLYPH_DATA[index].1)
    }

    #[rustfmt::skip]
    #[allow(unused_parens)]
    fn geometry(
        &self,
        digit_width: f32,
        digit_height: f32,
        segment_thickness: f32,
        segment_spacing: f32,
        digit_median: f32,
    ) -> Vec<Vec<Pos2>> {
        vec![
            vec![
                pos2(-(digit_width / 2.0) + (segment_thickness / 4.0) + segment_spacing, -(digit_height / 2.0) + (segment_thickness / 4.0)                                 ),
                pos2(-(digit_width / 2.0) + (segment_thickness / 2.0) + segment_spacing, -(digit_height / 2.0)                                                             ),
                pos2(                     - (segment_thickness / 2.0) - segment_spacing, -(digit_height / 2.0)                                                             ),
                pos2(                                                 - segment_spacing, -(digit_height / 2.0) + (segment_thickness / 2.0)                                 ),
                pos2(                     - (segment_thickness / 2.0) - segment_spacing, -(digit_height / 2.0) + (segment_thickness / 1.0)                                 ),
                pos2(-(digit_width / 2.0) + (segment_thickness / 1.0) + segment_spacing, -(digit_height / 2.0) + (segment_thickness / 1.0)                                 ),
            ],
            vec![
                pos2( (digit_width / 2.0) - (segment_thickness / 4.0) - segment_spacing, -(digit_height / 2.0) + (segment_thickness / 4.0)                                 ),
                pos2( (digit_width / 2.0) - (segment_thickness / 2.0) - segment_spacing, -(digit_height / 2.0)                                                             ),
                pos2(                       (segment_thickness / 2.0) + segment_spacing, -(digit_height / 2.0)                                                             ),
                pos2(                                                   segment_spacing, -(digit_height / 2.0) + (segment_thickness / 2.0)                                 ),
                pos2(                       (segment_thickness / 2.0) + segment_spacing, -(digit_height / 2.0) + (segment_thickness / 1.0)                                 ),
                pos2( (digit_width / 2.0) - (segment_thickness / 1.0) - segment_spacing, -(digit_height / 2.0) + (segment_thickness / 1.0)                                 ),
            ],
            vec![
                pos2( (digit_width / 2.0) - (segment_thickness / 1.0)                  , -(digit_height / 2.0) + (segment_thickness / 1.0) + segment_spacing               ),
                pos2( (digit_width / 2.0) - (segment_thickness / 4.0)                  , -(digit_height / 2.0) + (segment_thickness / 4.0) + segment_spacing               ),
                pos2( (digit_width / 2.0)                                              , -(digit_height / 2.0) + (segment_thickness / 2.0) + segment_spacing               ),
                pos2( (digit_width / 2.0)                                              ,                       - (segment_thickness / 2.0) - segment_spacing + digit_median),
                pos2( (digit_width / 2.0) - (segment_thickness / 2.0)                  ,                                                   - segment_spacing + digit_median),
                pos2( (digit_width / 2.0) - (segment_thickness / 1.0)                  ,                       - (segment_thickness / 2.0) - segment_spacing + digit_median),
            ],
            vec![
                pos2( (digit_width / 2.0) - (segment_thickness / 1.0)                  ,  (digit_height / 2.0) - (segment_thickness / 1.0) - segment_spacing               ),
                pos2( (digit_width / 2.0) - (segment_thickness / 4.0)                  ,  (digit_height / 2.0) - (segment_thickness / 4.0) - segment_spacing               ),
                pos2( (digit_width / 2.0)                                              ,  (digit_height / 2.0) - (segment_thickness / 2.0) - segment_spacing               ),
                pos2( (digit_width / 2.0)                                              ,                         (segment_thickness / 2.0) + segment_spacing + digit_median),
                pos2( (digit_width / 2.0) - (segment_thickness / 2.0)                  ,                                                     segment_spacing + digit_median),
                pos2( (digit_width / 2.0) - (segment_thickness / 1.0)                  ,                         (segment_thickness / 2.0) + segment_spacing + digit_median),
            ],
            vec![
                pos2( (digit_width / 2.0) - (segment_thickness / 4.0) - segment_spacing,  (digit_height / 2.0) - (segment_thickness / 4.0)                                 ),
                pos2( (digit_width / 2.0) - (segment_thickness / 2.0) - segment_spacing,  (digit_height / 2.0)                                                             ),
                pos2(                       (segment_thickness / 2.0) + segment_spacing,  (digit_height / 2.0)                                                             ),
                pos2(                                                   segment_spacing,  (digit_height / 2.0) - (segment_thickness / 2.0)                                 ),
                pos2(                       (segment_thickness / 2.0) + segment_spacing,  (digit_height / 2.0) - (segment_thickness / 1.0)                                 ),
                pos2( (digit_width / 2.0) - (segment_thickness / 1.0) - segment_spacing,  (digit_height / 2.0) - (segment_thickness / 1.0)                                 ),
            ],
            vec![
                pos2(-(digit_width / 2.0) + (segment_thickness / 4.0) + segment_spacing,  (digit_height / 2.0) - (segment_thickness / 4.0)                                 ),
                pos2(-(digit_width / 2.0) + (segment_thickness / 2.0) + segment_spacing,  (digit_height / 2.0)                                                             ),
                pos2(                     - (segment_thickness / 2.0) - segment_spacing,  (digit_height / 2.0)                                                             ),
                pos2(                                                 - segment_spacing,  (digit_height / 2.0) - (segment_thickness / 2.0)                                 ),
                pos2(                     - (segment_thickness / 2.0) - segment_spacing,  (digit_height / 2.0) - (segment_thickness / 1.0)                                 ),
                pos2(-(digit_width / 2.0) + (segment_thickness / 1.0) + segment_spacing,  (digit_height / 2.0) - (segment_thickness / 1.0)                                 ),
            ],
            vec![
                pos2(-(digit_width / 2.0) + (segment_thickness / 1.0)                  ,  (digit_height / 2.0) - (segment_thickness / 1.0) - segment_spacing               ),
                pos2(-(digit_width / 2.0) + (segment_thickness / 4.0)                  ,  (digit_height / 2.0) - (segment_thickness / 4.0) - segment_spacing               ),
                pos2(-(digit_width / 2.0)                                              ,  (digit_height / 2.0) - (segment_thickness / 2.0) - segment_spacing               ),
                pos2(-(digit_width / 2.0)                                              ,                         (segment_thickness / 2.0) + segment_spacing + digit_median),
                pos2(-(digit_width / 2.0) + (segment_thickness / 2.0)                  ,                                                     segment_spacing + digit_median),
                pos2(-(digit_width / 2.0) + (segment_thickness / 1.0)                  ,                         (segment_thickness / 2.0) + segment_spacing + digit_median),
            ],
            vec![
                pos2(-(digit_width / 2.0) + (segment_thickness / 1.0)                  , -(digit_height / 2.0) + (segment_thickness / 1.0) + segment_spacing               ),
                pos2(-(digit_width / 2.0) + (segment_thickness / 4.0)                  , -(digit_height / 2.0) + (segment_thickness / 4.0) + segment_spacing               ),
                pos2(-(digit_width / 2.0)                                              , -(digit_height / 2.0) + (segment_thickness / 2.0) + segment_spacing               ),
                pos2(-(digit_width / 2.0)                                              ,                       - (segment_thickness / 2.0) - segment_spacing + digit_median),
                pos2(-(digit_width / 2.0) + (segment_thickness / 2.0)                  ,                                                   - segment_spacing + digit_median),
                pos2(-(digit_width / 2.0) + (segment_thickness / 1.0)                  ,                       - (segment_thickness / 2.0) - segment_spacing + digit_median),
            ],
            vec![
                pos2(                                                 - segment_spacing,                                                   - segment_spacing + digit_median),
                pos2(                     - (segment_thickness / 2.0) - segment_spacing,                       - (segment_thickness / 1.0) - segment_spacing + digit_median),
                pos2(-(digit_width / 2.0) + (segment_thickness * 1.5) + segment_spacing, -(digit_height / 2.0) + (segment_thickness / 1.0) + segment_spacing               ),
                pos2(-(digit_width / 2.0) + (segment_thickness / 1.0) + segment_spacing, -(digit_height / 2.0) + (segment_thickness / 1.0) + segment_spacing               ),
                pos2(-(digit_width / 2.0) + (segment_thickness / 1.0) + segment_spacing, -(digit_height / 2.0) + (segment_thickness * 1.5) + segment_spacing               ),
                pos2(                     - (segment_thickness / 1.0) - segment_spacing,                       - (segment_thickness / 2.0) - segment_spacing + digit_median),
            ],
            vec![
                pos2(                     - (segment_thickness / 2.0)                  , -(digit_height / 2.0) + (segment_thickness / 1.0) + segment_spacing               ),
                pos2(                                                               0.0, -(digit_height / 2.0) + (segment_thickness / 2.0) + segment_spacing               ),
                pos2(                       (segment_thickness / 2.0)                  , -(digit_height / 2.0) + (segment_thickness / 1.0) + segment_spacing               ),
                pos2(                       (segment_thickness / 2.0)                  ,                       - (segment_thickness / 1.0) - segment_spacing + digit_median),
                pos2(                                                               0.0,                                                   - segment_spacing + digit_median),
                pos2(                     - (segment_thickness / 2.0)                  ,                       - (segment_thickness / 1.0) - segment_spacing + digit_median),
            ],
            vec![
                pos2(                       (segment_thickness / 2.0) + segment_spacing,                       - (segment_thickness / 1.0) - segment_spacing + digit_median),
                pos2( (digit_width / 2.0) - (segment_thickness * 1.5) - segment_spacing, -(digit_height / 2.0) + (segment_thickness / 1.0) + segment_spacing               ),
                pos2( (digit_width / 2.0) - (segment_thickness / 1.0) - segment_spacing, -(digit_height / 2.0) + (segment_thickness / 1.0) + segment_spacing               ),
                pos2( (digit_width / 2.0) - (segment_thickness / 1.0) - segment_spacing, -(digit_height / 2.0) + (segment_thickness * 1.5) + segment_spacing               ),
                pos2(                       (segment_thickness / 1.0) + segment_spacing,                       - (segment_thickness / 2.0) - segment_spacing + digit_median),
                pos2(                                                   segment_spacing,                                                   - segment_spacing + digit_median),
            ],
            vec![
                pos2(                       (segment_thickness / 1.0) + segment_spacing,                         (segment_thickness / 2.0)                   + digit_median),
                pos2(                                                   segment_spacing,                                                                       digit_median),
                pos2(                       (segment_thickness / 1.0) + segment_spacing,                       - (segment_thickness / 2.0)                   + digit_median),
                pos2( (digit_width / 2.0) - (segment_thickness / 1.0) - segment_spacing,                       - (segment_thickness / 2.0)                   + digit_median),
                pos2( (digit_width / 2.0) - (segment_thickness / 2.0) - segment_spacing,                                                                       digit_median),
                pos2( (digit_width / 2.0) - (segment_thickness / 1.0) - segment_spacing,                         (segment_thickness / 2.0)                   + digit_median),
            ],
            vec![
                pos2(                                                   segment_spacing,                                                     segment_spacing + digit_median),
                pos2(                       (segment_thickness / 2.0) + segment_spacing,                         (segment_thickness / 1.0) + segment_spacing + digit_median),
                pos2( (digit_width / 2.0) - (segment_thickness * 1.5) - segment_spacing,  (digit_height / 2.0) - (segment_thickness / 1.0) - segment_spacing               ),
                pos2( (digit_width / 2.0) - (segment_thickness / 1.0) - segment_spacing,  (digit_height / 2.0) - (segment_thickness / 1.0) - segment_spacing               ),
                pos2( (digit_width / 2.0) - (segment_thickness / 1.0) - segment_spacing,  (digit_height / 2.0) - (segment_thickness * 1.5) - segment_spacing               ),
                pos2(                       (segment_thickness / 1.0) + segment_spacing,                         (segment_thickness / 2.0) + segment_spacing + digit_median),
            ],
            vec![
                pos2(                     - (segment_thickness / 2.0)                  ,  (digit_height / 2.0) - (segment_thickness / 1.0) - segment_spacing               ),
                pos2(                                                               0.0,  (digit_height / 2.0) - (segment_thickness / 2.0) - segment_spacing               ),
                pos2(                       (segment_thickness / 2.0)                  ,  (digit_height / 2.0) - (segment_thickness / 1.0) - segment_spacing               ),
                pos2(                       (segment_thickness / 2.0)                  ,                         (segment_thickness / 1.0) + segment_spacing + digit_median),
                pos2(                                                               0.0,                                                     segment_spacing + digit_median),
                pos2(                     - (segment_thickness / 2.0)                  ,                         (segment_thickness / 1.0) + segment_spacing + digit_median),
            ],
            vec![
                pos2(                     - (segment_thickness / 2.0) - segment_spacing,                         (segment_thickness / 1.0) + segment_spacing + digit_median),
                pos2(-(digit_width / 2.0) + (segment_thickness * 1.5) + segment_spacing,  (digit_height / 2.0) - (segment_thickness / 1.0) - segment_spacing               ),
                pos2(-(digit_width / 2.0) + (segment_thickness / 1.0) + segment_spacing,  (digit_height / 2.0) - (segment_thickness / 1.0) - segment_spacing               ),
                pos2(-(digit_width / 2.0) + (segment_thickness / 1.0) + segment_spacing,  (digit_height / 2.0) - (segment_thickness * 1.5) - segment_spacing               ),
                pos2(                     - (segment_thickness / 1.0) - segment_spacing,                         (segment_thickness / 2.0) + segment_spacing + digit_median),
                pos2(                                                 - segment_spacing,                                                     segment_spacing + digit_median),
            ],
            vec![
                pos2(                     - (segment_thickness / 1.0) - segment_spacing,                         (segment_thickness / 2.0)                   + digit_median),
                pos2(                                                 - segment_spacing,                                                                       digit_median),
                pos2(                     - (segment_thickness / 1.0) - segment_spacing,                       - (segment_thickness / 2.0)                   + digit_median),
                pos2(-(digit_width / 2.0) + (segment_thickness / 1.0) + segment_spacing,                       - (segment_thickness / 2.0)                   + digit_median),
                pos2(-(digit_width / 2.0) + (segment_thickness / 2.0) + segment_spacing,                                                                       digit_median),
                pos2(-(digit_width / 2.0) + (segment_thickness / 1.0) + segment_spacing,                         (segment_thickness / 2.0)                   + digit_median),
            ],
        ]
    }
}
